/* eslint-disable */
// source: item_message.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf')
var goog = jspb
var global = Function('return this')()

goog.exportSymbol('proto.order.GetItemsByVendorCodeRequest', null, global)
goog.exportSymbol('proto.order.Item', null, global)
goog.exportSymbol('proto.order.ItemStatus', null, global)
goog.exportSymbol('proto.order.Items', null, global)
goog.exportSymbol('proto.order.UpdateItemStatusRequest', null, global)
goog.exportSymbol('proto.order.UpdateItemStatusResponse', null, global)
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.order.GetItemsByVendorCodeRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.order.GetItemsByVendorCodeRequest, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.order.GetItemsByVendorCodeRequest.displayName =
    'proto.order.GetItemsByVendorCodeRequest'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.order.UpdateItemStatusRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.order.UpdateItemStatusRequest, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.order.UpdateItemStatusRequest.displayName =
    'proto.order.UpdateItemStatusRequest'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.order.UpdateItemStatusResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.order.UpdateItemStatusResponse, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.order.UpdateItemStatusResponse.displayName =
    'proto.order.UpdateItemStatusResponse'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.order.Items = function (opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.order.Items.repeatedFields_,
    null,
  )
}
goog.inherits(proto.order.Items, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.order.Items.displayName = 'proto.order.Items'
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.order.Item = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.order.Item, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.order.Item.displayName = 'proto.order.Item'
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.order.GetItemsByVendorCodeRequest.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.order.GetItemsByVendorCodeRequest.toObject(
      opt_includeInstance,
      this,
    )
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.order.GetItemsByVendorCodeRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.order.GetItemsByVendorCodeRequest.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {
        vendorCode: jspb.Message.getFieldWithDefault(msg, 1, ''),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.order.GetItemsByVendorCodeRequest}
 */
proto.order.GetItemsByVendorCodeRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.order.GetItemsByVendorCodeRequest()
  return proto.order.GetItemsByVendorCodeRequest.deserializeBinaryFromReader(
    msg,
    reader,
  )
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.order.GetItemsByVendorCodeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.order.GetItemsByVendorCodeRequest}
 */
proto.order.GetItemsByVendorCodeRequest.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString())
        msg.setVendorCode(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.order.GetItemsByVendorCodeRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.order.GetItemsByVendorCodeRequest.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.order.GetItemsByVendorCodeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.order.GetItemsByVendorCodeRequest.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined
  f = message.getVendorCode()
  if (f.length > 0) {
    writer.writeString(1, f)
  }
}

/**
 * optional string vendor_code = 1;
 * @return {string}
 */
proto.order.GetItemsByVendorCodeRequest.prototype.getVendorCode = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''))
}

/**
 * @param {string} value
 * @return {!proto.order.GetItemsByVendorCodeRequest} returns this
 */
proto.order.GetItemsByVendorCodeRequest.prototype.setVendorCode = function (
  value,
) {
  return jspb.Message.setProto3StringField(this, 1, value)
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.order.UpdateItemStatusRequest.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.order.UpdateItemStatusRequest.toObject(
      opt_includeInstance,
      this,
    )
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.order.UpdateItemStatusRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.order.UpdateItemStatusRequest.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {
        itemId: jspb.Message.getFieldWithDefault(msg, 1, 0),
        statusId: jspb.Message.getFieldWithDefault(msg, 2, 0),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.order.UpdateItemStatusRequest}
 */
proto.order.UpdateItemStatusRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.order.UpdateItemStatusRequest()
  return proto.order.UpdateItemStatusRequest.deserializeBinaryFromReader(
    msg,
    reader,
  )
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.order.UpdateItemStatusRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.order.UpdateItemStatusRequest}
 */
proto.order.UpdateItemStatusRequest.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readUint64())
        msg.setItemId(value)
        break
      case 2:
        var value = /** @type {number} */ (reader.readUint32())
        msg.setStatusId(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.order.UpdateItemStatusRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.order.UpdateItemStatusRequest.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.order.UpdateItemStatusRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.order.UpdateItemStatusRequest.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined
  f = message.getItemId()
  if (f !== 0) {
    writer.writeUint64(1, f)
  }
  f = message.getStatusId()
  if (f !== 0) {
    writer.writeUint32(2, f)
  }
}

/**
 * optional uint64 item_id = 1;
 * @return {number}
 */
proto.order.UpdateItemStatusRequest.prototype.getItemId = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0))
}

/**
 * @param {number} value
 * @return {!proto.order.UpdateItemStatusRequest} returns this
 */
proto.order.UpdateItemStatusRequest.prototype.setItemId = function (value) {
  return jspb.Message.setProto3IntField(this, 1, value)
}

/**
 * optional uint32 status_id = 2;
 * @return {number}
 */
proto.order.UpdateItemStatusRequest.prototype.getStatusId = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0))
}

/**
 * @param {number} value
 * @return {!proto.order.UpdateItemStatusRequest} returns this
 */
proto.order.UpdateItemStatusRequest.prototype.setStatusId = function (value) {
  return jspb.Message.setProto3IntField(this, 2, value)
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.order.UpdateItemStatusResponse.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.order.UpdateItemStatusResponse.toObject(
      opt_includeInstance,
      this,
    )
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.order.UpdateItemStatusResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.order.UpdateItemStatusResponse.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {
        itemId: jspb.Message.getFieldWithDefault(msg, 1, 0),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.order.UpdateItemStatusResponse}
 */
proto.order.UpdateItemStatusResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.order.UpdateItemStatusResponse()
  return proto.order.UpdateItemStatusResponse.deserializeBinaryFromReader(
    msg,
    reader,
  )
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.order.UpdateItemStatusResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.order.UpdateItemStatusResponse}
 */
proto.order.UpdateItemStatusResponse.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readUint64())
        msg.setItemId(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.order.UpdateItemStatusResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.order.UpdateItemStatusResponse.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.order.UpdateItemStatusResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.order.UpdateItemStatusResponse.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined
  f = message.getItemId()
  if (f !== 0) {
    writer.writeUint64(1, f)
  }
}

/**
 * optional uint64 item_id = 1;
 * @return {number}
 */
proto.order.UpdateItemStatusResponse.prototype.getItemId = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0))
}

/**
 * @param {number} value
 * @return {!proto.order.UpdateItemStatusResponse} returns this
 */
proto.order.UpdateItemStatusResponse.prototype.setItemId = function (value) {
  return jspb.Message.setProto3IntField(this, 1, value)
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.order.Items.repeatedFields_ = [1]

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.order.Items.prototype.toObject = function (opt_includeInstance) {
    return proto.order.Items.toObject(opt_includeInstance, this)
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.order.Items} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.order.Items.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        itemsList: jspb.Message.toObjectList(
          msg.getItemsList(),
          proto.order.Item.toObject,
          includeInstance,
        ),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.order.Items}
 */
proto.order.Items.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.order.Items()
  return proto.order.Items.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.order.Items} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.order.Items}
 */
proto.order.Items.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = new proto.order.Item()
        reader.readMessage(value, proto.order.Item.deserializeBinaryFromReader)
        msg.addItems(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.order.Items.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.order.Items.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.order.Items} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.order.Items.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getItemsList()
  if (f.length > 0) {
    writer.writeRepeatedMessage(1, f, proto.order.Item.serializeBinaryToWriter)
  }
}

/**
 * repeated Item items = 1;
 * @return {!Array<!proto.order.Item>}
 */
proto.order.Items.prototype.getItemsList = function () {
  return /** @type{!Array<!proto.order.Item>} */ (jspb.Message.getRepeatedWrapperField(
    this,
    proto.order.Item,
    1,
  ))
}

/**
 * @param {!Array<!proto.order.Item>} value
 * @return {!proto.order.Items} returns this
 */
proto.order.Items.prototype.setItemsList = function (value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value)
}

/**
 * @param {!proto.order.Item=} opt_value
 * @param {number=} opt_index
 * @return {!proto.order.Item}
 */
proto.order.Items.prototype.addItems = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(
    this,
    1,
    opt_value,
    proto.order.Item,
    opt_index,
  )
}

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.order.Items} returns this
 */
proto.order.Items.prototype.clearItemsList = function () {
  return this.setItemsList([])
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.order.Item.prototype.toObject = function (opt_includeInstance) {
    return proto.order.Item.toObject(opt_includeInstance, this)
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.order.Item} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.order.Item.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        itemId: jspb.Message.getFieldWithDefault(msg, 1, 0),
        category: jspb.Message.getFieldWithDefault(msg, 2, ''),
        lot: jspb.Message.getFieldWithDefault(msg, 3, ''),
        vendorCode: jspb.Message.getFieldWithDefault(msg, 4, ''),
        image: jspb.Message.getFieldWithDefault(msg, 5, ''),
        size: jspb.Message.getFieldWithDefault(msg, 6, ''),
        count: jspb.Message.getFieldWithDefault(msg, 7, 0),
        weight: jspb.Message.getFloatingPointFieldWithDefault(msg, 8, 0.0),
        description: jspb.Message.getFieldWithDefault(msg, 9, ''),
        statusId: jspb.Message.getFieldWithDefault(msg, 10, 0),
        status: jspb.Message.getFieldWithDefault(msg, 11, ''),
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.order.Item}
 */
proto.order.Item.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.order.Item()
  return proto.order.Item.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.order.Item} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.order.Item}
 */
proto.order.Item.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readUint64())
        msg.setItemId(value)
        break
      case 2:
        var value = /** @type {string} */ (reader.readString())
        msg.setCategory(value)
        break
      case 3:
        var value = /** @type {string} */ (reader.readString())
        msg.setLot(value)
        break
      case 4:
        var value = /** @type {string} */ (reader.readString())
        msg.setVendorCode(value)
        break
      case 5:
        var value = /** @type {string} */ (reader.readString())
        msg.setImage(value)
        break
      case 6:
        var value = /** @type {string} */ (reader.readString())
        msg.setSize(value)
        break
      case 7:
        var value = /** @type {number} */ (reader.readUint64())
        msg.setCount(value)
        break
      case 8:
        var value = /** @type {number} */ (reader.readFloat())
        msg.setWeight(value)
        break
      case 9:
        var value = /** @type {string} */ (reader.readString())
        msg.setDescription(value)
        break
      case 10:
        var value = /** @type {number} */ (reader.readUint32())
        msg.setStatusId(value)
        break
      case 11:
        var value = /** @type {string} */ (reader.readString())
        msg.setStatus(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.order.Item.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.order.Item.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.order.Item} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.order.Item.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getItemId()
  if (f !== 0) {
    writer.writeUint64(1, f)
  }
  f = message.getCategory()
  if (f.length > 0) {
    writer.writeString(2, f)
  }
  f = message.getLot()
  if (f.length > 0) {
    writer.writeString(3, f)
  }
  f = message.getVendorCode()
  if (f.length > 0) {
    writer.writeString(4, f)
  }
  f = message.getImage()
  if (f.length > 0) {
    writer.writeString(5, f)
  }
  f = message.getSize()
  if (f.length > 0) {
    writer.writeString(6, f)
  }
  f = message.getCount()
  if (f !== 0) {
    writer.writeUint64(7, f)
  }
  f = message.getWeight()
  if (f !== 0.0) {
    writer.writeFloat(8, f)
  }
  f = message.getDescription()
  if (f.length > 0) {
    writer.writeString(9, f)
  }
  f = message.getStatusId()
  if (f !== 0) {
    writer.writeUint32(10, f)
  }
  f = message.getStatus()
  if (f.length > 0) {
    writer.writeString(11, f)
  }
}

/**
 * optional uint64 item_id = 1;
 * @return {number}
 */
proto.order.Item.prototype.getItemId = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0))
}

/**
 * @param {number} value
 * @return {!proto.order.Item} returns this
 */
proto.order.Item.prototype.setItemId = function (value) {
  return jspb.Message.setProto3IntField(this, 1, value)
}

/**
 * optional string category = 2;
 * @return {string}
 */
proto.order.Item.prototype.getCategory = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''))
}

/**
 * @param {string} value
 * @return {!proto.order.Item} returns this
 */
proto.order.Item.prototype.setCategory = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value)
}

/**
 * optional string lot = 3;
 * @return {string}
 */
proto.order.Item.prototype.getLot = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''))
}

/**
 * @param {string} value
 * @return {!proto.order.Item} returns this
 */
proto.order.Item.prototype.setLot = function (value) {
  return jspb.Message.setProto3StringField(this, 3, value)
}

/**
 * optional string vendor_code = 4;
 * @return {string}
 */
proto.order.Item.prototype.getVendorCode = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ''))
}

/**
 * @param {string} value
 * @return {!proto.order.Item} returns this
 */
proto.order.Item.prototype.setVendorCode = function (value) {
  return jspb.Message.setProto3StringField(this, 4, value)
}

/**
 * optional string image = 5;
 * @return {string}
 */
proto.order.Item.prototype.getImage = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ''))
}

/**
 * @param {string} value
 * @return {!proto.order.Item} returns this
 */
proto.order.Item.prototype.setImage = function (value) {
  return jspb.Message.setProto3StringField(this, 5, value)
}

/**
 * optional string size = 6;
 * @return {string}
 */
proto.order.Item.prototype.getSize = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ''))
}

/**
 * @param {string} value
 * @return {!proto.order.Item} returns this
 */
proto.order.Item.prototype.setSize = function (value) {
  return jspb.Message.setProto3StringField(this, 6, value)
}

/**
 * optional uint64 count = 7;
 * @return {number}
 */
proto.order.Item.prototype.getCount = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0))
}

/**
 * @param {number} value
 * @return {!proto.order.Item} returns this
 */
proto.order.Item.prototype.setCount = function (value) {
  return jspb.Message.setProto3IntField(this, 7, value)
}

/**
 * optional float weight = 8;
 * @return {number}
 */
proto.order.Item.prototype.getWeight = function () {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(
    this,
    8,
    0.0,
  ))
}

/**
 * @param {number} value
 * @return {!proto.order.Item} returns this
 */
proto.order.Item.prototype.setWeight = function (value) {
  return jspb.Message.setProto3FloatField(this, 8, value)
}

/**
 * optional string description = 9;
 * @return {string}
 */
proto.order.Item.prototype.getDescription = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ''))
}

/**
 * @param {string} value
 * @return {!proto.order.Item} returns this
 */
proto.order.Item.prototype.setDescription = function (value) {
  return jspb.Message.setProto3StringField(this, 9, value)
}

/**
 * optional uint32 status_id = 10;
 * @return {number}
 */
proto.order.Item.prototype.getStatusId = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0))
}

/**
 * @param {number} value
 * @return {!proto.order.Item} returns this
 */
proto.order.Item.prototype.setStatusId = function (value) {
  return jspb.Message.setProto3IntField(this, 10, value)
}

/**
 * optional string status = 11;
 * @return {string}
 */
proto.order.Item.prototype.getStatus = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ''))
}

/**
 * @param {string} value
 * @return {!proto.order.Item} returns this
 */
proto.order.Item.prototype.setStatus = function (value) {
  return jspb.Message.setProto3StringField(this, 11, value)
}

/**
 * @enum {number}
 */
proto.order.ItemStatus = {
  UNDEFINED: 0,
  IN_STOCK: 1,
  AWAIT_DELIVERY: 2,
  CLAIMS: 3,
  SHIPPED: 4,
}

goog.object.extend(exports, proto.order)
